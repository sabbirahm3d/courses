Project 1: Mailbox System
Sabbir Ahmed
-------------------------

This project implemented a mailbox system using a skiplist of queues data
structure.

Data structures
---------------

The skiplist data structure and its methods were mostly derived from its
original research paper, "Skip Lists: A Probabilistic Alternative to Balanced
Trees" (ftp://ftp.cs.umd.edu/pub/skipLists/skiplists.pdf). The paper described
the algorithms and the mathematical concepts required to construct a proper
skiplist data structure. The paper also included pseudocode of its methods,
which proved to be very useful during development.

Each one of the nodes of the skiplist were mappings of unsigned integer IDs to
queues of bytes. The queues themselves did not have many requirements beyond
the basic enqueue-dequeue functionalities. Even though there was the option to
utilize the kernel's library, the queue was implemented as a specialized data
structure to this project.

System calls
------------

The project implemented a total of 8 system calls:

- slmbx_init(unsigned int, unsigned int)
- slmbx_shutdown(void)
- slmbx_create(unsigned int, int)
- slmbx_destroy(unsigned int)
- slmbx_count(unsigned int)
- slmbx_send(unsigned int, const unsigned char *, unsigned int)
- slmbx_recv(unsigned int, unsigned char *, unsigned int)
- slmbx_length(unsigned int)

The system calls were implemented as wrappers around the core skiplist methods.
The system calls handled errors in a graceful manner and managed access
permissions. Mutex locks were also integrated into the calls to avoid any
producer-consumer problems.

Test drivers
------------

Several drivers have been provided to test the system calls. The drivers
generate output with both valid and invalid usages of the system calls to
demonstrate that all errors were handled.
